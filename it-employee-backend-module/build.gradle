plugins {
    id 'groovy'
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.sonarqube'
    id 'jacoco'
    id 'com.google.cloud.tools.jib'
}

apply plugin: 'org.owasp.dependencycheck'

dependencies {
    // Template Dependencies
    implementation project(':it-employee-client')

    // Tech Easy Solutions
    implementation 'dk.sunepoulsen.tes:tes-spring-boot-backend-logging:1.1.0-SNAPSHOT'
    implementation 'dk.sunepoulsen.tes:tes-rest-models:1.0.1-SNAPSHOT'
    implementation 'dk.sunepoulsen.tes:tes-spring-boot-rest-logic:1.0.1-SNAPSHOT'
    implementation 'dk.sunepoulsen.tes:tes-validation:1.0.1-SNAPSHOT'

    // Spring Boot
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.12'

    // Liquibase
    implementation 'org.liquibase:liquibase-core:4.17.2'
    implementation 'org.apache.commons:commons-text:1.10.0'

    // Database Drivers
    implementation 'com.h2database:h2:2.1.214'
    implementation 'org.postgresql:postgresql:42.5.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-spring:2.3-groovy-3.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
}

jib {
    from {
        image = 'eclipse-temurin:17-jre'
    }

    container {
        jvmFlags = [
                '-Dcom.sun.management.jmxremote',
                '-Dcom.sun.management.jmxremote.port=9010',
                '-Dcom.sun.management.jmxremote.local.only=false',
                '-Dcom.sun.management.jmxremote.authenticate=false',
                '-Dcom.sun.management.jmxremote.ssl=false'
            ]
        ports = ['8080', '9010']
    }
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

dependencyCheck {
    format='ALL'
}

sonarqube {
    properties {
        property 'sonar.dependencyCheck.severity.blocker', '9.0'
        property 'sonar.dependencyCheck.severity.critical', '7.0'
        property 'sonar.dependencyCheck.severity.major', '4.0'
        property 'sonar.dependencyCheck.severity.minor', '0.0'

        property 'sonar.dependencyCheck.jsonReportPath', 'build/reports/dependency-check-report.json'
        property 'sonar.dependencyCheck.htmlReportPath', 'build/reports/dependency-check-report.html'
    }
}

tasks.jacocoTestReport.dependsOn tasks.test
tasks.sonarqube.dependsOn tasks.dependencyCheckAnalyze
tasks.sonarqube.dependsOn tasks.jacocoTestReport
tasks.build.dependsOn tasks.jibDockerBuild
